import sqlite3
import asyncio
import re
from datetime import datetime, time
import logging
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import threading
from contextlib import contextmanager

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
db_lock = threading.Lock()

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
@contextmanager
def db_connection():
    with db_lock:
        conn = sqlite3.connect("risks.db", check_same_thread=False)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
        finally:
            conn.close()


PROBABILITY_MAPPING = {
    1: 10,  # <10%
    2: 15,  # 10-20%
    3: 27,  # 20-35%
    4: 47,  # 35-60%
    5: 60  # >60%
}

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ 5-–±–∞–ª–ª—å–Ω—É—é —à–∫–∞–ª—É
def get_cost_score(cost_impact: int) -> int:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ 5-–±–∞–ª–ª—å–Ω—É—é —à–∫–∞–ª—É"""
    if cost_impact < 100:
        return 1
    elif cost_impact < 200:
        return 2
    elif cost_impact < 500:
        return 3
    elif cost_impact < 1000:
        return 4
    else:
        return 5

def get_schedule_score(schedule_impact: int) -> int:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ –≤ 5-–±–∞–ª–ª—å–Ω—É—é —à–∫–∞–ª—É"""
    if schedule_impact < 14:
        return 1
    elif schedule_impact < 45:
        return 2
    elif schedule_impact < 90:
        return 3
    elif schedule_impact < 150:
        return 4
    else:
        return 5

def get_probability_score(probability: int) -> int:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ 5-–±–∞–ª–ª—å–Ω—É—é —à–∫–∞–ª—É"""
    if probability < 10:
        return 1
    elif probability < 20:
        return 2
    elif probability < 50:
        return 3
    elif probability < 75:
        return 4
    else:
        return 5

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    with db_connection() as conn:
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É risks —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)
        cursor.execute("""
                    CREATE TABLE IF NOT EXISTS risks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        phase TEXT,
                        object TEXT,
                        category TEXT,
                        description TEXT,
                        impact_schedule_min INTEGER,
                        impact_schedule_most_likely INTEGER,
                        impact_schedule_max INTEGER,
                        impact_cost_min INTEGER,
                        impact_cost_most_likely INTEGER,
                        impact_cost_max INTEGER,
                        impact_schedule_min_re INTEGER,
                        impact_schedule_most_likely_re INTEGER,
                        impact_schedule_max_re INTEGER,
                        impact_cost_min_re INTEGER,
                        impact_cost_most_likely_re INTEGER,
                        impact_cost_max_re INTEGER,
                        probability INTEGER,
                        probability_re INTEGER,
                        risk_score INTEGER,
                        timeline TEXT,
                        mitigation TEXT,
                        expected_result TEXT,
                        reevaluation_needed INTEGER,
                        needs_schedule_evaluation INTEGER,
                        needs_cost_evaluation INTEGER,
                        needs_schedule_evaluation_re INTEGER,
                        needs_cost_evaluation_re INTEGER,
                        timestamp TEXT
                    )
                """)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("PRAGMA table_info(risks)")
        columns = [column[1] for column in cursor.fetchall()]

        required_columns = {
            'impact_schedule_min': 'INTEGER',
            'impact_schedule_most_likely': 'INTEGER',
            'impact_schedule_max': 'INTEGER',
            'impact_cost_min': 'INTEGER',
            'impact_cost_most_likely': 'INTEGER',
            'impact_cost_max': 'INTEGER',
            'impact_schedule_min_re': 'INTEGER',
            'impact_schedule_most_likely_re': 'INTEGER',
            'impact_schedule_max_re': 'INTEGER',
            'impact_cost_min_re': 'INTEGER',
            'impact_cost_most_likely_re': 'INTEGER',
            'impact_cost_max_re': 'INTEGER',
            'probability': 'INTEGER',
            'probability_re': 'INTEGER',
            'risk_score': 'INTEGER',
            'timeline': 'TEXT',
            'mitigation': 'TEXT',
            'expected_result': 'TEXT',
            'reevaluation_needed': 'INTEGER',
            'needs_schedule_evaluation': 'INTEGER',
            'needs_cost_evaluation': 'INTEGER',
            'needs_schedule_evaluation_re': 'INTEGER',
            'needs_cost_evaluation_re': 'INTEGER'
        }

        for column_name, column_type in required_columns.items():
            if column_name not in columns:
                try:
                    cursor.execute(f'ALTER TABLE risks ADD COLUMN "{column_name}" {column_type}')
                except sqlite3.OperationalError as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É {column_name}: {e}")

                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            cursor.execute("""
                  CREATE TABLE IF NOT EXISTS additional_mitigations (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      risk_id INTEGER,
                      user_id INTEGER,
                      username TEXT,
                      mitigation TEXT,
                      expected_result TEXT,
                      timestamp TEXT,
                      FOREIGN KEY (risk_id) REFERENCES risks(id)
                  )
              """)
            conn.commit()

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å–æ–∫
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                is_subscribed INTEGER DEFAULT 1,
                last_notification DATE,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()



# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ===
PHASES = ["1", "2", "3", "4", "5", "–ü–µ—Å—Ü–æ–≤–æ–µ", "–ö–ü–†A"]
OBJECTS = ["–°–∫–≤–∞–∂–∏–Ω—ã", "–ö—É—Å—Ç–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏", "–ü–ª–æ—â–∞–¥–æ—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã", "–õ–∏–Ω–µ–π–Ω–∞—è —á–∞—Å—Ç—å", "–î—Ä—É–≥–æ–µ"]
CATEGORIES = ["–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–°—Ç–æ–∏–º–æ—Å—Ç–Ω–æ–π –∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥", "–ì–∏–†", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
              "–ó–∞–∫—É–ø–∫–∏", "–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥", "–ë—É—Ä–µ–Ω–∏–µ", "–ü–ë"]


# === –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" ===
def create_back_keyboard(back_data="back_to_menu"):
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥", callback_data=back_data)
    ]])

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ===
def subscribe_user(user_id: int):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR REPLACE INTO subscriptions (user_id, is_subscribed, last_notification)
            VALUES (?, 1, ?)
        """, (user_id, datetime.now().strftime("%Y-%m-%d")))
        conn.commit()

def unsubscribe_user(user_id: int):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE subscriptions SET is_subscribed = 0 WHERE user_id = ?
        """, (user_id,))
        conn.commit()

def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT is_subscribed FROM subscriptions WHERE user_id = ? AND is_subscribed = 1
        """, (user_id,))
        return cursor.fetchone() is not None

def get_subscribed_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT user_id FROM subscriptions WHERE is_subscribed = 1
        """)
        return [row[0] for row in cursor.fetchall()]

# === –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel ===
def export_to_excel():
    try:
        with db_connection() as conn:
            # SQL-–∑–∞–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–∫–æ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            df = pd.read_sql_query("""
                SELECT 
                    r.id,
                    r.username,
                    r.phase,
                    r.object,
                    r.category,
                    r.description,
                    r.impact_schedule_min,
                    r.impact_schedule_most_likely,
                    r.impact_schedule_max,
                    r.impact_cost_min,
                    r.impact_cost_most_likely,
                    r.impact_cost_max,
                    r.impact_schedule_min_re,
                    r.impact_schedule_most_likely_re,
                    r.impact_schedule_max_re,
                    r.impact_cost_min_re,
                    r.impact_cost_most_likely_re,
                    r.impact_cost_max_re,
                    r.probability,
                    r.probability_re,
                    r.risk_score,
                    r.timeline,
                    r.mitigation,
                    r.expected_result,
                    r.reevaluation_needed,
                    r.needs_schedule_evaluation,
                    r.needs_cost_evaluation,
                    r.needs_schedule_evaluation_re,
                    r.needs_cost_evaluation_re,
                    r.timestamp,
                    GROUP_CONCAT(m.mitigation, '\n\n') as additional_mitigations,
                    GROUP_CONCAT(m.expected_result, '\n\n') as additional_expected_results,
                    GROUP_CONCAT(m.username, '\n\n') as mitigation_usernames,
                    GROUP_CONCAT(m.timestamp, '\n\n') as mitigation_timestamps
                FROM risks r
                LEFT JOIN additional_mitigations m ON r.id = m.risk_id
                GROUP BY r.id
                ORDER BY r.risk_score DESC
            """, conn)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        column_names = {
            "id": "–ù–æ–º–µ—Ä —Ä–∏—Å–∫–∞",
            "username": "–û—Ç –∫–æ–≥–æ —Ä–∏—Å–∫",
            "phase": "–§–∞–∑–∞/–û–ø—Ü–∏—è",
            "object": "–û–±—ä–µ–∫—Ç",
            "category": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∏—Å–∫–∞",
            "impact_schedule_min": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∏–Ω)",
            "impact_schedule_most_likely": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–æ–∂–∏–¥–∞–µ–º–æ–µ)",
            "impact_schedule_max": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∞–∫—Å)",
            "impact_cost_min": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∏–Ω)",
            "impact_cost_most_likely": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–æ–∂–∏–¥–∞–µ–º–æ–µ)",
            "impact_cost_max": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∞–∫—Å)",
            "impact_schedule_min_re": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∏–Ω)",
            "impact_schedule_most_likely_re": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–æ–∂–∏–¥–∞–µ–º–æ–µ)",
            "impact_schedule_max_re": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∞–∫—Å)",
            "impact_cost_min_re": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∏–Ω)",
            "impact_cost_most_likely_re": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–æ–∂–∏–¥–∞–µ–º–æ–µ)",
            "impact_cost_max_re": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–º–∞–∫—Å)",
            "probability": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            "probability_re": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            "risk_score": "–†–µ–π—Ç–∏–Ω–≥ —Ä–∏—Å–∫–∞",
            "timeline": "–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞",
            "mitigation": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏",
            "expected_result": "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "reevaluation_needed": "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞",
            "needs_schedule_evaluation": "–ù—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤",
            "needs_cost_evaluation": "–ù—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
            "needs_schedule_evaluation_re": "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤",
            "needs_cost_evaluation_re": "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
            "timestamp": "–î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è",
            "additional_mitigations": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            "additional_expected_results": "–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            "mitigation_usernames": "–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            "mitigation_timestamps": "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        }

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        df = df.rename(columns=column_names)

        # –ó–∞–º–µ–Ω—è–µ–º 1/0 –Ω–∞ "–î–∞"/"–ù–µ—Ç" –≤ –±—É–ª–µ–≤—ã—Ö –ø–æ–ª—è—Ö
        yes_no_columns = [
            "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞", "–ù—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤", "–ù—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
            "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤", "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        ]
        for col in yes_no_columns:
            if col in df.columns:
                df[col] = df[col].map({1: "–î–∞", 0: "–ù–µ—Ç"})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        filename = f"–†–∏—Å–∫–∏_{datetime.now().strftime('%d%m%Y_%H%M')}.xlsx"
        df.to_excel(filename, index=False, sheet_name="–†–∏—Å–∫–∏", engine='openpyxl')
        return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
        return None

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π ===
def parse_three_values(text: str) -> tuple:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∑ –∏–∑ —Ç—Ä–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–µ
    numbers = re.findall(r'-?\d+', text)
    if len(numbers) >= 3:
        return int(numbers[0]), int(numbers[1]), int(numbers[2])
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞.")


def create_risk_selection_keyboard(risks):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∏—Å–∫–æ–≤.
    –†–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—è–¥–æ–≤ –ø–æ 4 —à—Ç—É–∫–∏.
    """
    keyboard = []
    row = []
    buttons_per_row = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É

    for risk in risks:
        risk_id = risk['id']
        button = InlineKeyboardButton(f"#{risk_id}", callback_data=f"view_risk_{risk_id}")
        row.append(button)

        # –ï—Å–ª–∏ –≤ —Ä—è–¥—É –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–Ω–æ–ø–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        if len(row) == buttons_per_row:
            keyboard.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if row:
        keyboard.append(row)

    return keyboard

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π ===
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    subscribe_user(user_id)
    message = (
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ–¥–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤!\n\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 14:30 –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∏—Å–∫–æ–≤."
    )
    await update.message.reply_text(message)

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    unsubscribe_user(user_id)
    message = "‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    await update.message.reply_text(message)


async def select_report_phase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–∑—ã
    keyboard = []
    for phase in PHASES:
        keyboard.append([InlineKeyboardButton(phase, callback_data=f"report_phase_{phase}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ñ–∞–∑—ã"
    keyboard.append([InlineKeyboardButton("–í—Å–µ —Ñ–∞–∑—ã", callback_data="report_phase_all")])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup)

# === –§—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ===
async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    subscribed_users = get_subscribed_users()
    current_date = datetime.now().strftime("%d.%m.%Y")

    message = (
        f"üìå –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç {current_date}\n\n"
        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–æ–≤–æ–º —Ä–∏—Å–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–æ–±—â–∏—Ç—å —Ä–∏—Å–∫' –≤ –º–µ–Ω—é –±–æ—Ç–∞.\n\n"
        "–í–∞—à–∏ —Ä–∏—Å–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–æ–µ–∫—Ç—É –±—ã—Ç—å –±–æ–ª–µ–µ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º!"
    )

    for user_id in subscribed_users:
        try:
            with db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT last_notification FROM subscriptions 
                    WHERE user_id = ? AND last_notification = ?
                """, (user_id, datetime.now().strftime("%Y-%m-%d")))
                already_notified = cursor.fetchone() is not None

            if not already_notified:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üì¢ –°–æ–æ–±—â–∏—Ç—å —Ä–∏—Å–∫", callback_data="submit_risk")
                    ]])
                )
                with db_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        UPDATE subscriptions SET last_notification = ? WHERE user_id = ?
                    """, (datetime.now().strftime("%Y-%m-%d"), user_id))
                    conn.commit()
                logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def toggle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    current_status = is_subscribed(user_id)

    if current_status:
        unsubscribe_user(user_id)
        message = "üîï –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    else:
        subscribe_user(user_id)
        message = "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"

    await query.edit_message_text(message)
    await start(update, context)


async def view_risks_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∏—Å–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É.
       –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–∑—É –∏–∑ callback_data –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'all' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç callback_data: view_phase_<phase_name> –∏–ª–∏ view_phase_all
    if query.data.startswith("view_phase_"):
        selected_phase = query.data.split("_", 2)[2]  # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–∞
        context.user_data['selected_view_phase'] = selected_phase
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–∑ –¥–µ—Ç–∞–ª–µ–π —Ä–∏—Å–∫–∞)
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ñ–∞–∑—É –∏–ª–∏ "all"
        selected_phase = context.user_data.get('selected_view_phase', 'all')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    MAX_RISKS_PER_MESSAGE = 30  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
    page = context.user_data.get('view_risks_page', 1)

    try:
        with db_connection() as conn:
            cursor = conn.cursor()

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∞–∑—ã
            if selected_phase == "all":
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤
                cursor.execute("SELECT COUNT(*) as total FROM risks")
                total_risks = cursor.fetchone()['total']

                # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ä–∏—Å–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                offset = (page - 1) * MAX_RISKS_PER_MESSAGE
                cursor.execute("""
                    SELECT id, description, risk_score, phase, object 
                    FROM risks 
                    ORDER BY risk_score DESC 
                    LIMIT ? OFFSET ?
                """, (MAX_RISKS_PER_MESSAGE, offset))
                risks = cursor.fetchall()
                phase_text = "–≤—Å–µ—Ö —Ñ–∞–∑–∞—Ö"
            else:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ñ–∞–∑—ã
                cursor.execute("SELECT COUNT(*) as total FROM risks WHERE phase = ?", (selected_phase,))
                total_risks = cursor.fetchone()['total']

                # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ä–∏—Å–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                offset = (page - 1) * MAX_RISKS_PER_MESSAGE
                cursor.execute("""
                    SELECT id, description, risk_score, phase, object 
                    FROM risks 
                    WHERE phase = ?
                    ORDER BY risk_score DESC 
                    LIMIT ? OFFSET ?
                """, (selected_phase, MAX_RISKS_PER_MESSAGE, offset))
                risks = cursor.fetchall()
                phase_text = f"—Ñ–∞–∑–µ '{selected_phase}'"

        if not risks:
            message = f"üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –¥–ª—è {phase_text}."
            await query.edit_message_text(
                message,
                reply_markup=create_back_keyboard("back_to_view_phase_selection")
            )
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_risks + MAX_RISKS_PER_MESSAGE - 1) // MAX_RISKS_PER_MESSAGE

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if total_pages > 1:
            message_lines = [f"üìã **–°–ø–∏—Å–æ–∫ —Ä–∏—Å–∫–æ–≤ ({phase_text}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):**\n"]
        else:
            message_lines = [f"üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤ ({phase_text}):**\n"]
        message_lines.append(f"üìà –í—Å–µ–≥–æ —Ä–∏—Å–∫–æ–≤: {total_risks}\n")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for risk in risks:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–∫–∞
            message_lines.append(
                f"**#{risk['id']}** (–†–µ–π—Ç–∏–Ω–≥: {risk['risk_score']})\n"
                f"   –§–∞–∑–∞: {risk['phase']}\n"
                f"   –û–±—ä–µ–∫—Ç: {risk['object']}\n"
                f"   –û–ø–∏—Å–∞–Ω–∏–µ: {risk['description'][:150]}{'...' if len(risk['description']) > 150 else ''}\n"
            )

        message = "\n".join(message_lines)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∏—Å–∫–∞ –ø–æ ID
        keyboard = create_risk_selection_keyboard(risks)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        navigation_buttons = []
        if total_pages > 1:
            if page > 1:
                navigation_buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_risks_page_{page - 1}_{selected_phase}"))
            if page < total_pages:
                navigation_buttons.append(
                    InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"view_risks_page_{page + 1}_{selected_phase}"))

        if navigation_buttons:
            keyboard.append(navigation_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–∏–∑—É
        control_buttons = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Ñ–∞–∑–∞", callback_data="view_risks_list")],  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–∑—ã
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        keyboard.extend(control_buttons)

        reply_markup = InlineKeyboardMarkup(keyboard)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode='Markdown' –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∏—Å–∫–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∏—Å–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_keyboard("back_to_menu")
        )


async def view_risk_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    query = update.callback_query
    await query.answer()
    risk_id = int(query.data.split("_")[2])

    try:
        with db_connection() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–µ
            cursor.execute("SELECT * FROM risks WHERE id = ?", (risk_id,))
            risk = cursor.fetchone()

            if not risk:
                await query.edit_message_text(
                    "–†–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=create_back_keyboard("back_to_menu")
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            cursor.execute("""
                SELECT * FROM additional_mitigations 
                WHERE risk_id = ? 
                ORDER BY timestamp DESC
            """, (risk_id,))
            additional_mitigations = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∏—Å–∫–∞
        message = f"üìã –î–µ—Ç–∞–ª–∏ —Ä–∏—Å–∫–∞ #{risk['id']} (—Ä–µ–π—Ç–∏–Ω–≥: {risk['risk_score']})\n\n"
        message += f"‚Ä¢ –§–∞–∑–∞: {risk['phase']}\n"
        message += f"‚Ä¢ –û–±—ä–µ–∫—Ç: {risk['object']}\n"
        message += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {risk['category']}\n"
        message += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {risk['description']}\n\n"

        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if risk['mitigation']:
            message += "üìå –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
            message += f"‚Ä¢ {risk['mitigation']}\n"
            if risk['expected_result']:
                message += f"  –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {risk['expected_result']}\n\n"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if additional_mitigations:
            message += "üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
            for i, mitigation in enumerate(additional_mitigations, 1):
                message += f"{i}. {mitigation['mitigation']}\n"
                if mitigation['expected_result']:
                    message += f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {mitigation['expected_result']}\n"
                message += f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {mitigation['username']} ({mitigation['timestamp'][:10]})\n\n"

        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"add_mitigation_{risk_id}")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="view_risks_list")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–∏—Å–∫–∞: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–∏—Å–∫–∞.",
            reply_markup=create_back_keyboard("back_to_menu")
        )


async def add_mitigation_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–∏—Å–∫—É"""
    query = update.callback_query
    await query.answer()
    risk_id = int(query.data.split("_")[2])

    context.user_data['adding_mitigation_to_risk'] = risk_id
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
        reply_markup=create_back_keyboard("back_to_risk_details")
    )
    context.user_data['awaiting_mitigation_for_existing_risk'] = True


async def handle_view_risks_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–ø–∏—Å–∫–∞ —Ä–∏—Å–∫–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∞–∑—É –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: view_risks_page_<page_number>_<phase> –∏–ª–∏ view_risks_page_<page_number>_all
    parts = query.data.split("_", 3)  # –†–∞–∑–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–∞
    if len(parts) >= 4:
        page = int(parts[3])
        selected_phase = parts[4] if len(parts) > 4 else 'all'
    else:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–∏—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        page = 1
        selected_phase = context.user_data.get('selected_view_phase', 'all')

    context.user_data['view_risks_page'] = page
    context.user_data['selected_view_phase'] = selected_phase

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∏—Å–∫–æ–≤
    # –ü–µ—Ä–µ–¥–∞–µ–º update –∏ context –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ view_risks_list –æ–∂–∏–¥–∞–µ—Ç callback_query
    # –∏ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ñ–∞–∑—É –∏–∑ context.user_data
    await view_risks_list(update, context)

async def handle_new_mitigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if not context.user_data.get('awaiting_mitigation_for_existing_risk'):
        return

    mitigation = update.message.text
    risk_id = context.user_data.get('adding_mitigation_to_risk')

    context.user_data['new_mitigation'] = mitigation
    context.user_data['awaiting_mitigation_for_existing_risk'] = False

    await update.message.reply_text(
        "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º):",
        reply_markup=create_back_keyboard("back_to_risk_details")
    )
    context.user_data['awaiting_expected_result_for_mitigation'] = True


async def handle_expected_result_for_mitigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    if not context.user_data.get('awaiting_expected_result_for_mitigation'):
        return

    expected_result = update.message.text
    risk_id = context.user_data.get('adding_mitigation_to_risk')
    mitigation = context.user_data.get('new_mitigation')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.full_name
        timestamp = datetime.now().isoformat()

        with db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO additional_mitigations (
                    risk_id, user_id, username, mitigation, expected_result, timestamp
                ) VALUES (?, ?, ?, ?, ?, ?)
            """, (risk_id, user_id, username, mitigation, expected_result, timestamp))
            conn.commit()

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('adding_mitigation_to_risk', None)
        context.user_data.pop('new_mitigation', None)
        context.user_data.pop('awaiting_expected_result_for_mitigation', None)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–∏—Å–∫–∞
        await update.message.reply_text(
            "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∏—Å–∫", callback_data=f"view_risk_{risk_id}")
            ]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            reply_markup=create_back_keyboard("back_to_menu")
        )


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º —Ä–∏—Å–∫–∞
async def back_to_risk_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    risk_id = context.user_data.get('adding_mitigation_to_risk', 0)

    if risk_id:
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
            reply_markup=create_back_keyboard("back_to_risk_details")
        )
        context.user_data['awaiting_mitigation_for_existing_risk'] = True
    else:
        await start(update, context)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR IGNORE INTO subscriptions (user_id, is_subscribed)
            VALUES (?, 1)
        """, (user_id,))
        conn.commit()
    is_subscribed_status = is_subscribed(user_id)
    subscription_text = "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if is_subscribed_status else "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∏—Å–∫–∏"
    keyboard = [
        [InlineKeyboardButton("üì¢ –°–æ–æ–±—â–∏—Ç—å —Ä–∏—Å–∫", callback_data="submit_risk")],
        [InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∏—Å–∫–∏/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="view_risks_list")],
        [InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –ø–æ —Ä–∏—Å–∫–∞–º", callback_data="report")],
        [InlineKeyboardButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")],
        [InlineKeyboardButton(subscription_text, callback_data="toggle_subscription")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞!", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤ –≤ –ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞!",
                                                      reply_markup=reply_markup)


async def submit_risk_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton(phase, callback_data=f"phase_{phase}")] for phase in PHASES]
    keyboard.append([InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ñ–∞–∑—É", callback_data="custom_phase")])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:", reply_markup=reply_markup)


async def custom_phase_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=create_back_keyboard("back_to_phase_selection")
    )
    context.user_data['awaiting_custom_phase'] = True


async def handle_custom_phase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_custom_phase'):
        return

    phase = update.message.text
    context.user_data['phase'] = phase
    context.user_data['awaiting_custom_phase'] = False

    keyboard = [[InlineKeyboardButton(obj, callback_data=f"object_{obj}")] for obj in OBJECTS]
    keyboard.append([InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ–±—ä–µ–∫—Ç", callback_data="custom_object")])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∞–∑–µ", callback_data="back_to_phase_selection")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"–§–∞–∑–∞: {phase}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:", reply_markup=reply_markup)


async def choose_phase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    phase = query.data.split("_", 1)[1]
    context.user_data['phase'] = phase

    keyboard = [[InlineKeyboardButton(obj, callback_data=f"object_{obj}")] for obj in OBJECTS]
    keyboard.append([InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ–±—ä–µ–∫—Ç", callback_data="custom_object")])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∞–∑–µ", callback_data="back_to_phase_selection")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–§–∞–∑–∞: {phase}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:", reply_markup=reply_markup)


async def custom_object_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:",
        reply_markup=create_back_keyboard("back_to_object_selection")
    )
    context.user_data['awaiting_custom_object'] = True


async def handle_custom_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_custom_object'):
        return

    obj = update.message.text
    context.user_data['object'] = obj
    context.user_data['awaiting_custom_object'] = False

    keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in CATEGORIES]
    keyboard.append(
        [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞", callback_data="custom_category")])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ä–µ–∫—Ç—É", callback_data="back_to_object_selection")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"–û–±—ä–µ–∫—Ç: {obj}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                    reply_markup=reply_markup)


async def choose_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    obj = query.data.split("_", 1)[1]
    context.user_data['object'] = obj

    keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in CATEGORIES]
    keyboard.append(
        [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞", callback_data="custom_category")])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ä–µ–∫—Ç—É", callback_data="back_to_object_selection")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–û–±—ä–µ–∫—Ç: {obj}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
                                  reply_markup=reply_markup)


async def custom_category_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞:",
        reply_markup=create_back_keyboard("back_to_category_selection")
    )
    context.user_data['awaiting_custom_category'] = True


async def handle_custom_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_custom_category'):
        return

    cat = update.message.text
    context.user_data['category'] = cat
    context.user_data['awaiting_custom_category'] = False

    await update.message.reply_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n"
        "–û–ø–∏—à–∏—Ç–µ —Ä–∏—Å–∫:",
        reply_markup=create_back_keyboard("back_to_category_selection")
    )
    context.user_data['awaiting_description'] = True


async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    cat = query.data.split("_", 1)[1]
    context.user_data['category'] = cat

    await query.edit_message_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n"
        "–û–ø–∏—à–∏—Ç–µ —Ä–∏—Å–∫:",
        reply_markup=create_back_keyboard("back_to_category_selection")
    )
    context.user_data['awaiting_description'] = True


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_description'):
        return

    description = update.message.text
    context.user_data['description'] = description
    context.user_data['awaiting_description'] = False

    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ä–æ–∫–∏
    keyboard = [
        [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="no_impact_schedule")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="evaluate_schedule_impact")],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–ü–æ–≤–µ—â–µ–Ω–∫–æ –°., –ì–∏—Ä–µ–Ω–∫–æ –í.)",
                              callback_data="request_schedule_evaluation")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="back_to_description")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –¥–Ω—è—Ö):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )


async def no_impact_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ä–æ–∫–∏
    context.user_data['impact_schedule_min'] = 0
    context.user_data['impact_schedule_most_likely'] = 0
    context.user_data['impact_schedule_max'] = 0
    context.user_data['needs_schedule_evaluation'] = 0  # –ù–µ –Ω—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    keyboard = [
        [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact")],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)", callback_data="request_cost_evaluation")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –º–ª–Ω.—Ä—É–±.):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )


async def request_schedule_evaluation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤
    context.user_data['needs_schedule_evaluation'] = 1
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ä–æ–∫–∏ (–ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏)
    context.user_data['impact_schedule_min'] = 0
    context.user_data['impact_schedule_most_likely'] = 0
    context.user_data['impact_schedule_max'] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    keyboard = [
        [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact")],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)", callback_data="request_cost_evaluation")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –º–ª–Ω.—Ä—É–±.):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )


async def evaluate_schedule_impact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–≤–æ–¥–∏—Ç)
    context.user_data['needs_schedule_evaluation'] = 0

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π):\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–≤ –¥–Ω—è—Ö), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
        reply_markup=create_back_keyboard("back_to_schedule_impact")
    )
    context.user_data['awaiting_schedule_values'] = True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ä–æ–∫–∏
async def handle_schedule_values(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_schedule_values'):
        return

    try:
        text = update.message.text
        min_val, most_likely_val, max_val = parse_three_values(text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏: min <= most_likely <= max
        if not (min_val <= most_likely_val <= max_val):
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è (–º–∏–Ω <= –≤–µ—Ä–æ—è—Ç–Ω–æ <= –º–∞–∫—Å).\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–æ–≤–∞:",
                reply_markup=create_back_keyboard("back_to_schedule_impact")
            )
            return

        context.user_data['impact_schedule_min'] = min_val
        context.user_data['impact_schedule_most_likely'] = most_likely_val
        context.user_data['impact_schedule_max'] = max_val
        context.user_data['awaiting_schedule_values'] = False

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        keyboard = [
            [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost")],
            [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)",
                                  callback_data="request_cost_evaluation")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )
    except ValueError as e:
        await update.message.reply_text(
            f"{str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
            reply_markup=create_back_keyboard("back_to_schedule_impact")
        )


async def no_impact_cost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    context.user_data['impact_cost_min'] = 0
    context.user_data['impact_cost_most_likely'] = 0
    context.user_data['impact_cost_max'] = 0
    context.user_data['needs_cost_evaluation'] = 0  # –ù–µ –Ω—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    keyboard = [
        [InlineKeyboardButton("<10%", callback_data="prob_1")],
        [InlineKeyboardButton("10-20%", callback_data="prob_2")],
        [InlineKeyboardButton("20-50%", callback_data="prob_3")],
        [InlineKeyboardButton("50-75%", callback_data="prob_4")],
        [InlineKeyboardButton(">75%", callback_data="prob_5")],
        [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                  reply_markup=reply_markup)


async def request_cost_evaluation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    context.user_data['needs_cost_evaluation'] = 1
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏)
    context.user_data['impact_cost_min'] = 0
    context.user_data['impact_cost_most_likely'] = 0
    context.user_data['impact_cost_max'] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    keyboard = [
        [InlineKeyboardButton("<10%", callback_data="prob_1")],
        [InlineKeyboardButton("10-20%", callback_data="prob_2")],
        [InlineKeyboardButton("20-50%", callback_data="prob_3")],
        [InlineKeyboardButton("50-75%", callback_data="prob_4")],
        [InlineKeyboardButton(">75%", callback_data="prob_5")],
        [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                  reply_markup=reply_markup)


async def evaluate_cost_impact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–≤–æ–¥–∏—Ç)
    context.user_data['needs_cost_evaluation'] = 0

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π):\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–≤ –º–ª–Ω. —Ä—É–±.), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
        reply_markup=create_back_keyboard("back_to_cost_impact")
    )
    context.user_data['awaiting_cost_values'] = True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
async def handle_cost_values(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_cost_values'):
        return

    try:
        text = update.message.text
        min_val, most_likely_val, max_val = parse_three_values(text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏: min <= most_likely <= max
        if not (min_val <= most_likely_val <= max_val):
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è (–º–∏–Ω <= –≤–µ—Ä–æ—è—Ç–Ω–æ <= –º–∞–∫—Å).\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–æ–≤–∞:",
                reply_markup=create_back_keyboard("back_to_cost_impact")
            )
            return

        context.user_data['impact_cost_min'] = min_val
        context.user_data['impact_cost_most_likely'] = most_likely_val
        context.user_data['impact_cost_max'] = max_val
        context.user_data['awaiting_cost_values'] = False

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        keyboard = [
            [InlineKeyboardButton("<10%", callback_data="prob_1")],
            [InlineKeyboardButton("10-20%", callback_data="prob_2")],
            [InlineKeyboardButton("20-50%", callback_data="prob_3")],
            [InlineKeyboardButton("50-75%", callback_data="prob_4")],
            [InlineKeyboardButton(">75%", callback_data="prob_5")],
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                        reply_markup=reply_markup)
    except ValueError as e:
        await update.message.reply_text(
            f"{str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
            reply_markup=create_back_keyboard("back_to_cost_impact")
        )


async def custom_probability_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –æ—Ç 0 –¥–æ 100):",
        reply_markup=create_back_keyboard("back_to_probability")
    )
    context.user_data['awaiting_custom_probability'] = True


async def handle_custom_probability(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_custom_probability'):
        return

    try:
        prob = int(update.message.text)
        if prob < 0 or prob > 100:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:",
                reply_markup=create_back_keyboard("back_to_probability")
            )
            return

        context.user_data['probability'] = prob
        context.user_data['awaiting_custom_probability'] = False

        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
            reply_markup=create_back_keyboard("back_to_probability")
        )
        context.user_data['awaiting_timeline'] = True
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:",
            reply_markup=create_back_keyboard("back_to_probability")
        )


async def choose_probability(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data.startswith("prob_re_"):
        return  # –ü—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç choose_probability_re

    try:
        prob_level = int(query.data.split("_")[1])  # <- –°—Ç—Ä–æ–∫–∞ 1109, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å –æ—Ç—Å—Ç—É–ø–æ–º
        if prob_level not in PROBABILITY_MAPPING:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", show_alert=True)
            return
        context.user_data['probability'] = PROBABILITY_MAPPING[prob_level]
        await query.edit_message_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
            reply_markup=create_back_keyboard("back_to_probability")
        )
        context.user_data['awaiting_timeline'] = True
    except (IndexError, ValueError):
        await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return


async def handle_timeline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_timeline'):
        return

    timeline = update.message.text
    context.user_data['timeline'] = timeline
    context.user_data['awaiting_timeline'] = False

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ –∏ –≤–Ω–µ—Å—Ç–∏ –æ—Ü–µ–Ω–∫—É",
                              callback_data="add_mitigation_with_evaluation")],
        [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏",
                              callback_data="add_mitigation_without_evaluation")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫—É", callback_data="back_to_timeline")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ ===

async def add_mitigation_with_evaluation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞
    context.user_data['reevaluation_needed'] = 1

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
        reply_markup=create_back_keyboard("back_to_mitigation_choice")
    )
    context.user_data['awaiting_mitigation'] = True


async def add_mitigation_without_evaluation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
    context.user_data['reevaluation_needed'] = 0

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
        reply_markup=create_back_keyboard("back_to_mitigation_choice")
    )
    context.user_data['awaiting_mitigation'] = True


async def handle_mitigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_mitigation'):
        return

    mitigation = update.message.text
    context.user_data['mitigation'] = mitigation
    context.user_data['awaiting_mitigation'] = False

    await update.message.reply_text(
        "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º):",
        reply_markup=create_back_keyboard("back_to_mitigation")
    )
    context.user_data['awaiting_expected_result'] = True


async def handle_expected_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_expected_result'):
        return

    expected_result = update.message.text
    context.user_data['expected_result'] = expected_result
    context.user_data['awaiting_expected_result'] = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞
    if context.user_data.get('reevaluation_needed', 0) == 1:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫—É –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ä–æ–∫–∏ (—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏)
        keyboard = [
            [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="no_impact_schedule_re")],
            [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="evaluate_schedule_impact_re")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–ü–æ–≤–µ—â–µ–Ω–∫–æ –°., –ì–∏—Ä–µ–Ω–∫–æ –í.)",
                                  callback_data="request_schedule_evaluation_re")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_mitigation_result")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏, –≤ –¥–Ω—è—Ö):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏—Å–∫
        await save_risk(update, context)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ (—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏) ===

async def no_impact_schedule_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ä–æ–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–µ
    context.user_data['impact_schedule_min_re'] = 0
    context.user_data['impact_schedule_most_likely_re'] = 0
    context.user_data['impact_schedule_max_re'] = 0
    context.user_data['needs_schedule_evaluation_re'] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    keyboard = [
        [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost_re")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact_re")],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)",
                              callback_data="request_cost_evaluation_re")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact_re")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )


async def request_schedule_evaluation_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–µ
    context.user_data['needs_schedule_evaluation_re'] = 1
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ä–æ–∫–∏ (–ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏)
    context.user_data['impact_schedule_min_re'] = 0
    context.user_data['impact_schedule_most_likely_re'] = 0
    context.user_data['impact_schedule_max_re'] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    keyboard = [
        [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost_re")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact_re")],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)",
                              callback_data="request_cost_evaluation_re")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact_re")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )


async def evaluate_schedule_impact_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ–∫–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–≤–æ–¥–∏—Ç)
    context.user_data['needs_schedule_evaluation_re'] = 0

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏):\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–≤ –¥–Ω—è—Ö), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
        reply_markup=create_back_keyboard("back_to_schedule_impact_re")
    )
    context.user_data['awaiting_schedule_values_re'] = True


async def handle_schedule_values_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_schedule_values_re'):
        return

    try:
        text = update.message.text
        min_val, most_likely_val, max_val = parse_three_values(text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏: min <= most_likely <= max
        if not (min_val <= most_likely_val <= max_val):
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è (–º–∏–Ω <= –≤–µ—Ä–æ—è—Ç–Ω–æ <= –º–∞–∫—Å).\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–æ–≤–∞:",
                reply_markup=create_back_keyboard("back_to_schedule_impact_re")
            )
            return

        context.user_data['impact_schedule_min_re'] = min_val
        context.user_data['impact_schedule_most_likely_re'] = most_likely_val
        context.user_data['impact_schedule_max_re'] = max_val
        context.user_data['awaiting_schedule_values_re'] = False

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        keyboard = [
            [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost_re")],
            [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact_re")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)",
                                  callback_data="request_cost_evaluation_re")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact_re")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )
    except ValueError as e:
        await update.message.reply_text(
            f"{str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
            reply_markup=create_back_keyboard("back_to_schedule_impact_re")
        )


async def no_impact_cost_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–µ
    context.user_data['impact_cost_min_re'] = 0
    context.user_data['impact_cost_most_likely_re'] = 0
    context.user_data['impact_cost_max_re'] = 0
    context.user_data['needs_cost_evaluation_re'] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    keyboard = [
        [InlineKeyboardButton("<10%", callback_data="prob_re_1")],
        [InlineKeyboardButton("10-20%", callback_data="prob_re_2")],
        [InlineKeyboardButton("20-50%", callback_data="prob_re_3")],
        [InlineKeyboardButton("50-75%", callback_data="prob_re_4")],
        [InlineKeyboardButton(">75%", callback_data="prob_re_5")],
        [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability_re")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact_re")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                  reply_markup=reply_markup)


async def request_cost_evaluation_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–µ
    context.user_data['needs_cost_evaluation_re'] = 1
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏)
    context.user_data['impact_cost_min_re'] = 0
    context.user_data['impact_cost_most_likely_re'] = 0
    context.user_data['impact_cost_max_re'] = 0

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    keyboard = [
        [InlineKeyboardButton("<10%", callback_data="prob_re_1")],
        [InlineKeyboardButton("10-20%", callback_data="prob_re_2")],
        [InlineKeyboardButton("20-50%", callback_data="prob_re_3")],
        [InlineKeyboardButton("50-75%", callback_data="prob_re_4")],
        [InlineKeyboardButton(">75%", callback_data="prob_re_5")],
        [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability_re")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact_re")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                  reply_markup=reply_markup)


async def evaluate_cost_impact_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–≤–æ–¥–∏—Ç)
    context.user_data['needs_cost_evaluation_re'] = 0

    await query.edit_message_text(
        "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏):\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–≤ –º–ª–Ω. —Ä—É–±.), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
        reply_markup=create_back_keyboard("back_to_cost_impact_re")
    )
    context.user_data['awaiting_cost_values_re'] = True


async def handle_cost_values_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_cost_values_re'):
        return

    try:
        text = update.message.text
        min_val, most_likely_val, max_val = parse_three_values(text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏: min <= most_likely <= max
        if not (min_val <= most_likely_val <= max_val):
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è (–º–∏–Ω <= –≤–µ—Ä–æ—è—Ç–Ω–æ <= –º–∞–∫—Å).\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–æ–≤–∞:",
                reply_markup=create_back_keyboard("back_to_cost_impact_re")
            )
            return

        context.user_data['impact_cost_min_re'] = min_val
        context.user_data['impact_cost_most_likely_re'] = most_likely_val
        context.user_data['impact_cost_max_re'] = max_val
        context.user_data['awaiting_cost_values_re'] = False

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        keyboard = [
            [InlineKeyboardButton("<10%", callback_data="prob_re_1")],
            [InlineKeyboardButton("10-20%", callback_data="prob_re_2")],
            [InlineKeyboardButton("20-50%", callback_data="prob_re_3")],
            [InlineKeyboardButton("50-75%", callback_data="prob_re_4")],
            [InlineKeyboardButton(">75%", callback_data="prob_re_5")],
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability_re")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact_re")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                        reply_markup=reply_markup)
    except ValueError as e:
        await update.message.reply_text(
            f"{str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π:",
            reply_markup=create_back_keyboard("back_to_cost_impact_re")
        )


async def custom_probability_re_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –æ—Ç 0 –¥–æ 100):",
        reply_markup=create_back_keyboard("back_to_probability_re")
    )
    context.user_data['awaiting_custom_probability_re'] = True


async def select_view_phase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–∑—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–∑—ã
    keyboard = []
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∑—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for phase in PHASES:
        keyboard.append([InlineKeyboardButton(phase, callback_data=f"view_phase_{phase}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ —Ñ–∞–∑—ã"
    keyboard.append([InlineKeyboardButton("–í—Å–µ —Ñ–∞–∑—ã", callback_data="view_phase_all")])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∏—Å–∫–æ–≤:", reply_markup=reply_markup)

async def handle_custom_probability_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_custom_probability_re'):
        return

    try:
        prob = int(update.message.text)
        if prob < 0 or prob > 100:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:",
                reply_markup=create_back_keyboard("back_to_probability_re")
            )
            return

        context.user_data['probability_re'] = prob
        context.user_data['awaiting_custom_probability_re'] = False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏
        await save_risk(update, context)
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:",
            reply_markup=create_back_keyboard("back_to_probability_re")
        )


async def choose_probability_re(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –§–æ—Ä–º–∞—Ç: prob_re_1 ‚Üí split ‚Üí ['prob', 're', '1']
        parts = query.data.split("_")
        if len(parts) != 3 or parts[0] != "prob" or parts[1] != "re":
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        prob_level = int(parts[2])
        if prob_level not in PROBABILITY_MAPPING:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", show_alert=True)
            return
        context.user_data['probability_re'] = PROBABILITY_MAPPING[prob_level]
        await save_risk(update, context)
    except (IndexError, ValueError):
        await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return


# === –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–∞ ===
async def save_risk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    probability = context.user_data.get('probability', 0)
    impact_cost_most_likely = context.user_data.get('impact_cost_most_likely', 0)
    impact_schedule_most_likely = context.user_data.get('impact_schedule_most_likely', 0)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 5-–±–∞–ª–ª—å–Ω—É—é —à–∫–∞–ª—É
    cost_score = get_cost_score(impact_cost_most_likely)
    schedule_score = get_schedule_score(impact_schedule_most_likely)
    probability_score = get_probability_score(probability)

    # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ
    risk_score = cost_score + schedule_score + probability_score
    context.user_data['risk_score'] = risk_score

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        with db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO risks (
                    user_id, username, phase, object, category, description,
                    impact_schedule_min, impact_schedule_most_likely, impact_schedule_max,
                    impact_cost_min, impact_cost_most_likely, impact_cost_max,
                    impact_schedule_min_re, impact_schedule_most_likely_re, impact_schedule_max_re,
                    impact_cost_min_re, impact_cost_most_likely_re, impact_cost_max_re,
                    probability, probability_re, risk_score, timeline, mitigation, expected_result,
                    reevaluation_needed, needs_schedule_evaluation, needs_cost_evaluation,
                    needs_schedule_evaluation_re, needs_cost_evaluation_re, timestamp
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id, username,
                context.user_data.get('phase'),
                context.user_data.get('object'),
                context.user_data.get('category'),
                context.user_data.get('description'),
                context.user_data.get('impact_schedule_min', 0),
                context.user_data.get('impact_schedule_most_likely', 0),
                context.user_data.get('impact_schedule_max', 0),
                context.user_data.get('impact_cost_min', 0),
                context.user_data.get('impact_cost_most_likely', 0),
                context.user_data.get('impact_cost_max', 0),
                context.user_data.get('impact_schedule_min_re', 0),
                context.user_data.get('impact_schedule_most_likely_re', 0),
                context.user_data.get('impact_schedule_max_re', 0),
                context.user_data.get('impact_cost_min_re', 0),
                context.user_data.get('impact_cost_most_likely_re', 0),
                context.user_data.get('impact_cost_max_re', 0),
                context.user_data.get('probability', 0),
                context.user_data.get('probability_re', 0),
                risk_score,
                context.user_data.get('timeline'),
                context.user_data.get('mitigation'),
                context.user_data.get('expected_result'),
                context.user_data.get('reevaluation_needed', 0),
                context.user_data.get('needs_schedule_evaluation', 0),
                context.user_data.get('needs_cost_evaluation', 0),
                context.user_data.get('needs_schedule_evaluation_re', 0),
                context.user_data.get('needs_cost_evaluation_re', 0),
                datetime.now().isoformat()
            ))
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_back_keyboard("back_to_menu")
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    message = "‚úÖ –†–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
    message += f"üìä –†–µ–π—Ç–∏–Ω–≥ —Ä–∏—Å–∫–∞: {risk_score}\n\n"
    message += f"üìã –î–µ—Ç–∞–ª–∏:\n"
    message += f"‚Ä¢ –§–∞–∑–∞: {context.user_data.get('phase')}\n"
    message += f"‚Ä¢ –û–±—ä–µ–∫—Ç: {context.user_data.get('object')}\n"
    message += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {context.user_data.get('category')}\n"
    message += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('description')}\n"
    message += f"‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏: {context.user_data.get('impact_schedule_min', 0)} / {context.user_data.get('impact_schedule_most_likely', 0)} / {context.user_data.get('impact_schedule_max', 0)} –¥–Ω–µ–π\n"
    message += f"‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {context.user_data.get('impact_cost_min', 0)} / {context.user_data.get('impact_cost_most_likely', 0)} / {context.user_data.get('impact_cost_max', 0)} –º–ª–Ω. —Ä—É–±.\n"
    message += f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}%\n"
    message += f"‚Ä¢ –°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {context.user_data.get('timeline')}\n"
    message += f"‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {context.user_data.get('mitigation')}\n"
    message += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {context.user_data.get('expected_result')}\n"

    if context.user_data.get('reevaluation_needed', 0) == 1:
        message += f"\nüìà –ü–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n"
        message += f"‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏: {context.user_data.get('impact_schedule_min_re', 0)} / {context.user_data.get('impact_schedule_most_likely_re', 0)} / {context.user_data.get('impact_schedule_max_re', 0)} –¥–Ω–µ–π\n"
        message += f"‚Ä¢ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {context.user_data.get('impact_cost_min_re', 0)} / {context.user_data.get('impact_cost_most_likely_re', 0)} / {context.user_data.get('impact_cost_max_re', 0)} –º–ª–Ω. —Ä—É–±.\n"
        message += f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {context.user_data.get('probability_re', 0)}%\n"

    keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ ===
async def show_phase_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    phase_data = query.data

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∑—É –∏–∑ callback_data
    if phase_data == "report_phase_all":
        phase = None
    else:
        phase = phase_data.replace("report_phase_", "")

    try:
        with db_connection() as conn:
            cursor = conn.cursor()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞
            where_clause = ""
            params = []
            if phase:
                where_clause = "WHERE phase = ?"
                params = [phase]

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤
            cursor.execute(f"SELECT COUNT(*) as total FROM risks {where_clause}", params)
            total_risks = cursor.fetchone()['total']

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if where_clause:
                cursor.execute(f"""
                    SELECT category, COUNT(*) as count 
                    FROM risks 
                    {where_clause}
                    GROUP BY category 
                    ORDER BY count DESC
                """, params)
            else:
                cursor.execute("""
                    SELECT category, COUNT(*) as count 
                    FROM risks 
                    GROUP BY category 
                    ORDER BY count DESC
                """)
            categories = cursor.fetchall()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Ä–∏—Å–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            if where_clause:
                cursor.execute(f"""
                    SELECT description, risk_score 
                    FROM risks 
                    {where_clause}
                    ORDER BY risk_score DESC 
                    LIMIT 5
                """, params)
            else:
                cursor.execute("""
                    SELECT description, risk_score 
                    FROM risks 
                    ORDER BY risk_score DESC 
                    LIMIT 5
                """)
            top_risks = cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
            if phase:
                message = f"üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∏—Å–∫–∞–º (—Ñ–∞–∑–∞: {phase})\n"
            else:
                message = "üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∏—Å–∫–∞–º (–≤—Å–µ —Ñ–∞–∑—ã)\n"

            message += f"üìà –í—Å–µ–≥–æ —Ä–∏—Å–∫–æ–≤: {total_risks}\n"
            message += "üè∑Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category in categories:
                message += f"‚Ä¢ {category['category']}: {category['count']}\n"
            message += "\nüî• –¢–æ–ø-5 —Ä–∏—Å–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n"
            for i, risk in enumerate(top_risks, 1):
                # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
                desc = risk['description'][:200] + "..." if len(risk['description']) > 200 else risk['description']
                message += f"{i}. {desc} - {risk['risk_score']}\n"

            keyboard = [
                [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–∞–∑—É", callback_data="select_report_phase")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
                [InlineKeyboardButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="export_excel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_keyboard("back_to_menu")
        )


async def export_excel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message_to_delete = await query.edit_message_text("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...")

    filename = export_to_excel()
    if filename:
        try:
            with open(filename, 'rb') as file:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=file,
                    caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∏—Å–∫–∞–º"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.",
                reply_markup=create_back_keyboard("back_to_menu")
            )
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.",
            reply_markup=create_back_keyboard("back_to_menu")
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=message_to_delete.message_id
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await start(update, context)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ===
async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    back_data = query.data

    if back_data == "back_to_menu":
        await start(update, context)

    elif back_data == "back_to_phase_selection":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–∑—ã
        context.user_data.pop('phase', None)
        context.user_data.pop('awaiting_custom_phase', None)
        await submit_risk_start(update, context)

    elif back_data == "toggle_subscription":
        await toggle_subscription(update, context)

    elif back_data == "back_to_object_selection":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –æ–±—ä–µ–∫—Ç–∞
        context.user_data.pop('object', None)
        context.user_data.pop('awaiting_custom_object', None)
        phase = context.user_data.get('phase')

        keyboard = [[InlineKeyboardButton(obj, callback_data=f"object_{obj}")] for obj in OBJECTS]
        keyboard.append([InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ–±—ä–µ–∫—Ç", callback_data="custom_object")])
        keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∞–∑–µ", callback_data="back_to_phase_selection")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(f"–§–∞–∑–∞: {phase}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:", reply_markup=reply_markup)

    elif back_data == "back_to_view_phase_selection":
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–∑—ã
        context.user_data.pop('selected_view_phase', None)
        context.user_data.pop('view_risks_page', None)
        await select_view_phase(update, context)

    elif back_data == "back_to_category_selection":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        context.user_data.pop('category', None)
        context.user_data.pop('awaiting_custom_category', None)
        obj = context.user_data.get('object')

        keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in CATEGORIES]
        keyboard.append(
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞", callback_data="custom_category")])
        keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—ä–µ–∫—Ç—É", callback_data="back_to_object_selection")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(f"–û–±—ä–µ–∫—Ç: {obj}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
                                      reply_markup=reply_markup)

    elif back_data == "back_to_description":
        # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
        context.user_data.pop('description', None)
        context.user_data.pop('awaiting_description', None)
        cat = context.user_data.get('category')

        await query.edit_message_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n"
            "–û–ø–∏—à–∏—Ç–µ —Ä–∏—Å–∫:",
            reply_markup=create_back_keyboard("back_to_category_selection")
        )
        context.user_data['awaiting_description'] = True

    elif back_data == "back_to_schedule_impact":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ —Å—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        context.user_data.pop('impact_schedule_min', None)
        context.user_data.pop('impact_schedule_most_likely', None)
        context.user_data.pop('impact_schedule_max', None)
        context.user_data.pop('needs_schedule_evaluation', None)
        context.user_data.pop('awaiting_schedule_values', None)

        keyboard = [
            [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="no_impact_schedule")],
            [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="evaluate_schedule_impact")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–ü–æ–≤–µ—â–µ–Ω–∫–æ –°., –ì–∏—Ä–µ–Ω–∫–æ –í.)",
                                  callback_data="request_schedule_evaluation")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="back_to_description")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )

    elif back_data == "back_to_cost_impact":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        context.user_data.pop('impact_cost_min', None)
        context.user_data.pop('impact_cost_most_likely', None)
        context.user_data.pop('impact_cost_max', None)
        context.user_data.pop('needs_cost_evaluation', None)
        context.user_data.pop('awaiting_cost_values', None)

        keyboard = [
            [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost")],
            [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)",
                                  callback_data="request_cost_evaluation")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )

    elif back_data == "back_to_probability":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        context.user_data.pop('probability', None)
        context.user_data.pop('awaiting_custom_probability', None)

        keyboard = [
            [InlineKeyboardButton("<10%", callback_data="prob_1")],
            [InlineKeyboardButton("10-20%", callback_data="prob_2")],
            [InlineKeyboardButton("20-50%", callback_data="prob_3")],
            [InlineKeyboardButton("60-75%", callback_data="prob_4")],
            [InlineKeyboardButton(">75%", callback_data="prob_5")],
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                      reply_markup=reply_markup)

    elif back_data == "back_to_timeline":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ä–æ–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É
        context.user_data.pop('timeline', None)
        context.user_data.pop('awaiting_timeline', None)

        await query.edit_message_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
            reply_markup=create_back_keyboard("back_to_probability")
        )
        context.user_data['awaiting_timeline'] = True

    elif back_data == "back_to_mitigation_choice":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        context.user_data.pop('reevaluation_needed', None)
        context.user_data.pop('awaiting_mitigation', None)

        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ –∏ –≤–Ω–µ—Å—Ç–∏ –æ—Ü–µ–Ω–∫—É",
                                  callback_data="add_mitigation_with_evaluation")],
            [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏",
                                  callback_data="add_mitigation_without_evaluation")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫—É", callback_data="back_to_timeline")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    elif back_data == "back_to_mitigation":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É
        context.user_data.pop('mitigation', None)
        context.user_data.pop('awaiting_mitigation', None)

        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞:",
            reply_markup=create_back_keyboard("back_to_mitigation_choice")
        )
        context.user_data['awaiting_mitigation'] = True

    elif back_data == "back_to_mitigation_result":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–∂–∏–¥–∞–µ–º–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É
        context.user_data.pop('expected_result', None)
        context.user_data.pop('awaiting_expected_result', None)

        await query.edit_message_text(
            "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–æ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º):",
            reply_markup=create_back_keyboard("back_to_mitigation")
        )
        context.user_data['awaiting_expected_result'] = True

    elif back_data == "back_to_schedule_impact_re":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ —Å—Ä–æ–∫–∏ (–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        context.user_data.pop('impact_schedule_min_re', None)
        context.user_data.pop('impact_schedule_most_likely_re', None)
        context.user_data.pop('impact_schedule_max_re', None)
        context.user_data.pop('needs_schedule_evaluation_re', None)
        context.user_data.pop('awaiting_schedule_values_re', None)

        keyboard = [
            [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="no_impact_schedule_re")],
            [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏", callback_data="evaluate_schedule_impact_re")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–ü–æ–≤–µ—â–µ–Ω–∫–æ –°., –ì–∏—Ä–µ–Ω–∫–æ –í.)",
                                  callback_data="request_schedule_evaluation_re")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_mitigation_result")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏ (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )

    elif back_data == "back_to_cost_impact_re":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        context.user_data.pop('impact_cost_min_re', None)
        context.user_data.pop('impact_cost_most_likely_re', None)
        context.user_data.pop('impact_cost_max_re', None)
        context.user_data.pop('needs_cost_evaluation_re', None)
        context.user_data.pop('awaiting_cost_values_re', None)

        keyboard = [
            [InlineKeyboardButton("–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="no_impact_cost_re")],
            [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="evaluate_cost_impact_re")],
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ü–µ–Ω–∫—É (–î–∞–≤—ã–¥–æ–≤–∞ –ï., –ë–æ—Ä–∏—Å–æ–≤ –ê.)",
                                  callback_data="request_cost_evaluation_re")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ä–æ–∫–∞–º", callback_data="back_to_schedule_impact_re")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏):\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=reply_markup
        )

    elif back_data == "back_to_probability_re":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
        context.user_data.pop('probability_re', None)
        context.user_data.pop('awaiting_custom_probability_re', None)

        keyboard = [
            [InlineKeyboardButton("<10%", callback_data="prob_re_1")],
            [InlineKeyboardButton("10-20%", callback_data="prob_re_2")],
            [InlineKeyboardButton("20-50%", callback_data="prob_re_3")],
            [InlineKeyboardButton("50-75%", callback_data="prob_re_4")],
            [InlineKeyboardButton(">75%", callback_data="prob_re_5")],
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data="custom_probability_re")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="back_to_cost_impact_re")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text("–û—Ü–µ–Ω–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                                      reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è
    if context.user_data.get('awaiting_custom_phase'):
        await handle_custom_phase(update, context)
    elif context.user_data.get('awaiting_custom_object'):
        await handle_custom_object(update, context)
    elif context.user_data.get('awaiting_custom_category'):
        await handle_custom_category(update, context)
    elif context.user_data.get('awaiting_description'):
        await get_description(update, context)
    elif context.user_data.get('awaiting_schedule_values'):
        await handle_schedule_values(update, context)
    elif context.user_data.get('awaiting_cost_values'):
        await handle_cost_values(update, context)
    elif context.user_data.get('awaiting_custom_probability'):
        await handle_custom_probability(update, context)
    elif context.user_data.get('awaiting_timeline'):
        await handle_timeline(update, context)
    elif context.user_data.get('awaiting_mitigation'):
        await handle_mitigation(update, context)
    elif context.user_data.get('awaiting_expected_result'):
        await handle_expected_result(update, context)
    elif context.user_data.get('awaiting_schedule_values_re'):
        await handle_schedule_values_re(update, context)
    elif context.user_data.get('awaiting_cost_values_re'):
        await handle_cost_values_re(update, context)
    elif context.user_data.get('awaiting_custom_probability_re'):
        await handle_custom_probability_re(update, context)
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    elif context.user_data.get('awaiting_mitigation_for_existing_risk'):
        await handle_new_mitigation(update, context)
    elif context.user_data.get('awaiting_expected_result_for_mitigation'):
        await handle_expected_result_for_mitigation(update, context)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    init_db()

    application = Application.builder().token("8226676788:AAEddKIZuMR1b5Mv4dD_JrGCf0a6oWAw2ic").build()


    # üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 11:30
    application.job_queue.run_daily(
        send_daily_reminder,
        time=time(hour=11, minute=30),
        name="daily_reminder"
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    application.add_handler(CallbackQueryHandler(toggle_subscription, pattern="^toggle_subscription$"))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(submit_risk_start, pattern="^submit_risk$"))
    application.add_handler(CallbackQueryHandler(select_report_phase, pattern="^report$"))
    application.add_handler(CallbackQueryHandler(select_view_phase, pattern="^view_risks_list$"))
    application.add_handler(CallbackQueryHandler(show_phase_report, pattern="^report_phase_"))
    application.add_handler(CallbackQueryHandler(select_report_phase, pattern="^select_report_phase$"))
    application.add_handler(CallbackQueryHandler(export_excel_handler, pattern="^export_excel$"))
    application.add_handler(CallbackQueryHandler(custom_phase_request, pattern="^custom_phase$"))
    application.add_handler(CallbackQueryHandler(choose_phase, pattern="^phase_"))
    application.add_handler(CallbackQueryHandler(view_risks_list, pattern="^view_phase_"))
    application.add_handler(CallbackQueryHandler(custom_object_request, pattern="^custom_object$"))
    application.add_handler(CallbackQueryHandler(choose_object, pattern="^object_"))
    application.add_handler(CallbackQueryHandler(custom_category_request, pattern="^custom_category$"))
    application.add_handler(CallbackQueryHandler(choose_category, pattern="^cat_"))
    application.add_handler(CallbackQueryHandler(no_impact_schedule, pattern="^no_impact_schedule$"))
    application.add_handler(CallbackQueryHandler(request_schedule_evaluation, pattern="^request_schedule_evaluation$"))
    application.add_handler(CallbackQueryHandler(evaluate_schedule_impact, pattern="^evaluate_schedule_impact$"))
    application.add_handler(CallbackQueryHandler(no_impact_cost, pattern="^no_impact_cost$"))
    application.add_handler(CallbackQueryHandler(request_cost_evaluation, pattern="^request_cost_evaluation$"))
    application.add_handler(CallbackQueryHandler(evaluate_cost_impact, pattern="^evaluate_cost_impact$"))
    application.add_handler(CallbackQueryHandler(custom_probability_request, pattern="^custom_probability$"))
    application.add_handler(CallbackQueryHandler(choose_probability_re, pattern="^prob_re_\\d+$"))
    application.add_handler(CallbackQueryHandler(view_risks_list, pattern="^view_risks_list$"))
    application.add_handler(CallbackQueryHandler(view_risk_details, pattern="^view_risk_\\d+$"))
    application.add_handler(CallbackQueryHandler(add_mitigation_start, pattern="^add_mitigation_\\d+$"))
    application.add_handler(CallbackQueryHandler(back_to_risk_details, pattern="^back_to_risk_details$"))
    application.add_handler(
        CallbackQueryHandler(add_mitigation_with_evaluation, pattern="^add_mitigation_with_evaluation$"))
    application.add_handler(
        CallbackQueryHandler(add_mitigation_without_evaluation, pattern="^add_mitigation_without_evaluation$"))
    application.add_handler(CallbackQueryHandler(no_impact_schedule_re, pattern="^no_impact_schedule_re$"))
    application.add_handler(
        CallbackQueryHandler(request_schedule_evaluation_re, pattern="^request_schedule_evaluation_re$"))
    application.add_handler(CallbackQueryHandler(evaluate_schedule_impact_re, pattern="^evaluate_schedule_impact_re$"))
    application.add_handler(CallbackQueryHandler(no_impact_cost_re, pattern="^no_impact_cost_re$"))
    application.add_handler(CallbackQueryHandler(request_cost_evaluation_re, pattern="^request_cost_evaluation_re$"))
    application.add_handler(CallbackQueryHandler(evaluate_cost_impact_re, pattern="^evaluate_cost_impact_re$"))
    application.add_handler(CallbackQueryHandler(custom_probability_re_request, pattern="^custom_probability_re$"))
    application.add_handler(CallbackQueryHandler(choose_probability, pattern="^prob_\\d+$"))
    application.add_handler(CallbackQueryHandler(handle_back, pattern="^back_to_"))
    application.add_handler(CallbackQueryHandler(handle_view_risks_page, pattern="^view_risks_page_"))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()